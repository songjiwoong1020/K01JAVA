package ex03operator;

public class E07BitOperator {
	
	/*
	비트연산자 : 자료를 bit단위로 논리 연산한다.
		& : And. 좌우가 둘다 1일때만 1을 반환. 나머지는 0
		| : Or. 좌우 둘중 하나만 1이면 1을 반환. 둘다0일때 0반환
		^ : XOR. 둘이 같으면 0, 다르면 1을 반환
		~ : NOT. 반전된 값을 반환. 1이면0, 0이면 1을 반환
	 */

	public static void main(String[] args) {
		
		int num1 = 5; //00000000 00000000 00000000 00000101
		int num2 = 3; //00000000 00000000 00000000 00000011
		int num3 = -1;//11111111 11111111 11111111 11111111
					  // -1이 위와같은 이유는 1을 더했을때 0이되기 때문이다.
					  // 양수 1을 2의 보수를 취하면 -1이 된다.
		System.out.println("비트AND:"+ (num1 & num2));// 1
		System.out.println("비트OR:"  +(num1 | num2));// 7
		System.out.println("비트XOR:" + (num1 ^ num2));// 6
		System.out.println("비트Not:" + (~num3));// 0
	}

}
/*
& : 하나만 1일때 1
| : 하나라도 1이면 1
^ : 둘의 값이 다르면 1
~ : 반전

16 8 4 2 1
3=011
5=101


음수를 이진수로 표현하기
	1. 우선 양수의 이진수 값을 구함
	2. 1의 보수를 취함(0과 1 반전)
	3. 2의 보수를 취함(더하기1)
*/